from math import modf

import baku_modules
reload(baku_modules)

from baku_modules import Cursor
from baku_modules import AXIS_Z
from baku_modules import callMouseEvents

SCALE_DRAG_SPEED = .01

class State(object):
        def __init__(self, state_name, scene_viewer):
                self.state_name = state_name
                self.scene_viewer = scene_viewer

        def onEnter(self,kwargs):
                self.node = kwargs["node"]
                self.scaledrag = None

                self.cursor = Cursor({
                        'node': self.node,
                        'scene_viewer': self.scene_viewer,
                        'reference_geo': self.node.node('SOURCE').geometry()
                })

                # Setup Guide

                self.guide_face = hou.GeometryDrawable(
                        self.scene_viewer,
                        geo_type = hou.drawableGeometryType.Face,
                        name = 'face',
                        geometry = self.node.node('GUIDE_FACE').geometry(),
                        params = {
                                'style': hou.drawableGeometryFaceStyle.Plain,
                                'color1': (0, 1, 1, 0.1),
                                'color2': (0, 1, 1, 0.1),
                                'highlight_mode': hou.drawableHighlightMode.Matte
                        })

                self.guide_grid = hou.GeometryDrawable(
                        self.scene_viewer,
                        geo_type = hou.drawableGeometryType.Line,
                        name = 'face',
                        geometry = self.node.node('GUIDE_GRID').geometry(),
                        params = {
                                'line_width': 2,
                                'style': hou.drawableGeometryLineStyle.Plain,
                                'color1': (0, 1, 1, 0.5),
                                'color2': (0, 1, 1, 0.5),
                                'highlight_mode': hou.drawableHighlightMode.Matte
                        })
                
                self.guide_attachment = hou.GeometryDrawable(
                        self.scene_viewer,
                        geo_type = hou.drawableGeometryType.Line,
                        name = 'attachment',
                        geometry = self.node.node('ATTACHMENT').geometry(),
                        params = {
                                'style': hou.drawableGeometryLineStyle.Plain,
                                'color1': (1, 0, 0, 1),
                                'color2': (1, 0, 0, 1),
                                'highlight_mode': hou.drawableHighlightMode.Matte,
                        })              
                self._showGuides(True)

        def onExit(self,kwargs):
                """ Called when the state terminates
                """
                state_parms = kwargs["state_parms"]

        def onInterrupt(self, kwargs):
                """ Called when the state is interrupted e.g when the mouse 
                moves outside the viewport
                """
                self._showGuides(False)

        def onResume(self, kwargs):
                """ Called when an interrupted state resumes
                """
                self._showGuides(True)

        def _snapPrimUV(self, uv, state_parms):

                enable_grid = state_parms['enable_grid']['value']
                grid = state_parms['grid']['value']

                snapped_uv = [value for value in uv]

                if enable_grid:         
                        for i, div in enumerate(grid):
                                if div > 0:
                                        floating = modf(uv[i] * (div + 1))[0]
                                        if .7 < abs(floating - .5) * 2:
                                                snapped_uv[i] = round(uv[i] * (div + 1)) / (div + 1)
                
                return snapped_uv

        def onMousemove(self, kwargs):
                pass

        def onMousedown(self, kwargs):

                device = kwargs['ui_event'].device()
                state_parms = kwargs['state_parms']

                if device.isCtrlKey():
                        # Drag to change scale
                        self.scaledrag = {
                                'origin': self.cursor.position,
                                'normal_origin': self.cursor.normal,
                                'mouse_screen_origin': self.cursor.mouse_screen,
                                'scale_origin': state_parms['scale']['value']
                        }
                
                else:
                        # Add
                        if self.cursor.snapped == 'reference':
                                attachments_parm = self.node.parm('attachments')
                                index = attachments_parm.evalAsInt()
                                number = index + 1

                                primnum = self.cursor.snapped_prim.number()
                                uv = [self.cursor.primuv[0], self.cursor.primuv[1]]
                                scale = state_parms['scale']['value']

                                # Snap to Grid
                                uv = self._snapPrimUV(uv, state_parms)
                                
                                with hou.undos.group('Add new attachment'):
                                        attachments_parm.insertMultiParmInstance(index)
                                        self.node.parm('pattern%d' % number).set('%d' % primnum)
                                        self.node.parmTuple('primuv%d' % number).set(uv)
                                        self.node.parm('scale%d' % number).set(scale)
        
        def onMousedrag(self, kwargs):
                
                device = kwargs['ui_event'].device()
                state_parms = kwargs['state_parms']

                if self.scaledrag:
                        
                        scale = state_parms['scale']['value']
                        mouse_screen_origin = self.scaledrag['mouse_screen_origin']
                        scale_origin = self.scaledrag['scale_origin']

                        scale_delta = (self.cursor.mouse_screen[0] - mouse_screen_origin[0]) * SCALE_DRAG_SPEED
                        scale = max(0, scale_origin + scale_delta)

                        if device.isShiftKey():
                                scale = round(scale * 2) / 2
                        
                        state_parms['scale']['value'] = scale
                        
        def onMouseup(self, kwargs):
                self.scaledrag = None
        
        def onMouseEvent(self, kwargs):
                state_parms = kwargs['state_parms']
                ui_event = kwargs['ui_event']
                
                options = {
                        'ui_event': ui_event
                }
                self.cursor.update(options)
                
                callMouseEvents(self, kwargs)

                # Upate guide info
                with hou.undos.disabler():
                        if self.cursor.snapped == 'reference':
                                self.node.parm('hovering_prim').set("%d" % self.cursor.snapped_prim.number())

                                if state_parms['enable_grid']['value']:
                                        self.node.parmTuple('grid').set(state_parms['grid']['value'])

                return False

        def onDraw(self, kwargs):
                draw_handle = kwargs["draw_handle"]     
                state_parms = kwargs['state_parms']
                                
                if self.cursor.snapped == 'reference':
                        self.guide_face.draw(draw_handle)
                
                if self.cursor.snapped == 'reference' and state_parms['enable_grid']['value']:
                        self.guide_grid.draw(draw_handle)
        
                if self.scaledrag or self.cursor.snapped == 'reference':
                        
                        xform = self._computeAttachmentGuideXform(state_parms)
                
                        self.guide_attachment.setTransform(xform)
                        self.guide_attachment.draw(draw_handle)

        def onCommand(self, kwargs):
                name = kwargs['command']

                if name == 'update_input':
                        print('geo')
                        source_geo = self.node.node('SOURCE').geometry()
                        self.cursor.setReferenceGeometry(source_geo)

                        attachment_geo = self.node.node('ATTACHMENT').geometry()
                        self.guide_attachment.setGeometry(attachment_geo)
        
        def _showGuides(self, flag):
                self.guide_attachment.show(flag)
                self.guide_grid.show(flag)
                self.guide_face.show(flag)
        
        def _computeAttachmentGuideXform(self, state_parms):

                        uv = [self.cursor.primuv[0], self.cursor.primuv[1]]
                        uv = self._snapPrimUV(uv, state_parms)

                        translate = None
                        normal = None

                        if self.scaledrag:
                                translate = self.scaledrag['origin']
                                normal = self.scaledrag['normal_origin']
                        else:
                                translate = self.cursor.snapped_prim.positionAtInterior(uv[0], uv[1])
                                normal = self.cursor.normal
                                
                        rotate = AXIS_Z.matrixToRotateTo(normal).extractRotates()
                        pscale = state_parms['scale']['value']

                        scale_mat = hou.hmath.buildScale(pscale, pscale, pscale)
                                                
                        xform = hou.hmath.buildTransform({
                                'translate': translate,
                                'rotate': rotate
                        })

                        xform = scale_mat * xform

                        return self.cursor.computeDrawableXform(xform)

def createViewerStateTemplate():
                
        # Grab a reference to the asset's node type
        nodetype = kwargs['type']

        state_typename = nodetype.definition().sections()["DefaultState"].contents()
        state_label = nodetype.description()
        state_cat = hou.sopNodeTypeCategory()

        template = hou.ViewerStateTemplate(state_typename, state_label, state_cat)
        template.bindFactory(State)
        template.bindIcon(nodetype.icon())

        # template.bindParameter(hou.parmTemplateType.Menu, name="tool", 
        #       menu_items=(('add', 'Add'), ('edit', 'Edit')),
        #       menu_as_button_strip=True)

        template.bindParameter(hou.parmTemplateType.Float, name="scale", 
                align=True,
                label="Scale", min_limit=0, max_limit=10, default_value=1.0)
        
        template.bindParameter(hou.parmTemplateType.Toggle, name="enable_grid",
                align=True, label="Grid", default_value=True)
                
        template.bindParameter(hou.parmTemplateType.Int, name="grid",
                align=True,
                num_components=2,
                label="", min_limit=0, max_limit=10, default_value=1)
        return template