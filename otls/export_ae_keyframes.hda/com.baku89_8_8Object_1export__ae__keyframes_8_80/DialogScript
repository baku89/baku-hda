# Dialog script for com.baku89::export_ae_keyframes::0 automatically generated

{
    name	com.baku89::export_ae_keyframes::0
    script	com.baku89::export_ae_keyframes::0
    label	"Export AE Keyframes"

    help {
	""
    }

    inputlabel	1	"Sub-Network Input #1"

    group {
        name    "stdswitcher4"
        label   "Transform"

        parm {
            name    "xOrd"
            baseparm
            label   "Transform Order"
            joinnext
            export  none
        }
        parm {
            name    "rOrd"
            baseparm
            label   "Rotate Order"
            nolabel
            export  none
        }
        parm {
            name    "t"
            baseparm
            label   "Translate"
            export  all
        }
        parm {
            name    "r"
            baseparm
            label   "Rotate"
            export  all
        }
        parm {
            name    "s"
            baseparm
            label   "Scale"
            export  none
        }
        parm {
            name    "p"
            baseparm
            label   "Pivot Translate"
            export  none
        }
        parm {
            name    "pr"
            baseparm
            label   "Pivot Rotate"
            export  none
        }
        parm {
            name    "scale"
            baseparm
            label   "Uniform Scale"
            export  none
        }
        parm {
            name    "pre_xform"
            baseparm
            label   "Modify Pre-Transform"
            export  none
        }
        parm {
            name    "keeppos"
            baseparm
            label   "Keep Position When Parenting"
            export  none
        }
        parm {
            name    "childcomp"
            baseparm
            label   "Child Compensation"
            export  none
        }
        parm {
            name    "constraints_on"
            baseparm
            label   "Enable Constraints"
            export  none
        }
        parm {
            name    "constraints_path"
            baseparm
            label   "Constraints"
            export  none
        }
        parm {
            name    "lookatpath"
            baseparm
            label   "Look At"
            invisible
            export  none
        }
        parm {
            name    "lookupobjpath"
            baseparm
            label   "Look Up Object"
            invisible
            export  none
        }
        parm {
            name    "lookup"
            baseparm
            label   "Look At Up Vector"
            invisible
            export  none
        }
        parm {
            name    "pathobjpath"
            baseparm
            label   "Path Object"
            invisible
            export  none
        }
        parm {
            name    "roll"
            baseparm
            label   "Roll"
            invisible
            export  none
        }
        parm {
            name    "pos"
            baseparm
            label   "Position"
            invisible
            export  none
        }
        parm {
            name    "uparmtype"
            baseparm
            label   "Parameterization"
            invisible
            export  none
        }
        parm {
            name    "pathorient"
            baseparm
            label   "Orient Along Path"
            invisible
            export  none
        }
        parm {
            name    "up"
            baseparm
            label   "Orient Up Vector"
            invisible
            export  none
        }
        parm {
            name    "bank"
            baseparm
            label   "Auto-Bank factor"
            invisible
            export  none
        }
    }

    group {
        name    "stdswitcher4_1"
        label   "AE Export"

        parm {
            name    "frange"
            label   "Frame Range"
            type    intvector2
            size    2
            default { [ "$FSTART" hscript-expr ] [ "$FEND" hscript-expr ] }
            range   { 0! 1 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "fps"
            label   "Frame Rate"
            type    integer
            default { [ "$FPS" hscript-expr ] }
            range   { 1! 10 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "position_scale"
            label   "Position Scale"
            type    float
            default { "1" }
            range   { 0! 100 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "mode"
            label   "Export Target"
            type    ordinal
            default { "0" }
            menu {
                "xform"     "This Node"
                "camera"    "Camera"
                "custom"    "Custom Object"
            }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "camera"
            label   "Camera"
            type    oppath
            default { "" }
            hidewhen "{ mode != camera }"
            parmtag { "opfilter" "!!OBJ/CAMERA!!" }
            parmtag { "oprelative" "." }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "object"
            label   "Object Path"
            type    oppath
            default { "" }
            hidewhen "{ mode != custom }"
            parmtag { "opfilter" "!!OBJ!!" }
            parmtag { "oprelative" "." }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "cleanup_keyframes"
            label   "Clean Up Unnecessary Keyframes"
            type    toggle
            default { "1" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "execute"
            label   "Copy Keyframes to Clipboard"
            type    button
            default { "0" }
            parmtag { "script_callback" "exec(hou.pwd().parm('script').evalAsString())" }
            parmtag { "script_callback_language" "python" }
        }
    }

    group {
        name    "stdswitcher4_2"
        label   "Script"

        parm {
            name    "script"
            label   "Script"
            type    string
            default { "from hutil.Qt.QtWidgets import QApplication\nimport math\n\ndef main():\n    node = hou.pwd()\n\n    exportMode = node.parm('mode').evalAsString()\n\n    cam = node.parm('camera').evalAsNode() if exportMode == 'camera' else None\n\n    target = node\n    if exportMode == 'camera':\n        target = cam\n    elif exportMode == 'custom':\n        target = node.parm('object').evalAsNode()\n\n    if target == None:\n        hou.ui.displayMessage('No object is specified.', ('OK',))\n        return\n\n    fstart, fend = node.parmTuple('frange').eval()\n    fps = node.parm('fps').eval()\n    width, height = cam.parmTuple('res').eval() if exportMode == 'camera' else [1920, 1080]\n    positionScale = node.parm('position_scale').eval()\n\n    data = {\n        'position': [],\n        'x_rotation': [],\n        'y_rotation': [],\n        'z_rotation': []\n    }\n\n    if exportMode == 'camera':\n        data['zoom'] = []\n        data['poi'] = 'transform.position + [0, 0, -1]'\n    else:\n        data['scale'] = []\n\n    prevFrameData = None\n\n    for f in xrange(fstart, fend + 1):\n\n        time = float(f - 1) / fps\n        xform = target.worldTransformAtTime(time)\n        components = xform.explode(rotate_order='zyx')\n\n        position = components['translate']\n        position *= positionScale\n        position = (position[0] * -1, position[1] * -1, position[2])\n        data['position'].append((f, position))\n\n        rotations = components['rotate']\n        data['x_rotation'].append((f, rotations[0]))\n        data['y_rotation'].append((f, rotations[1] * -1))\n        data['z_rotation'].append((f, rotations[2] * -1))\n\n        if exportMode == 'camera':\n            zoom = getZoomAtFrame(cam, f)\n            data['zoom'].append((f, zoom))\n        else:\n            scale = tuple(components['scale'] * 100)\n            data['scale'].append((f, scale))\n\n    # Clean up unnecessary keyframes \n    if node.parm('cleanup_keyframes').eval() == 1:\n        for prop in data.keys():\n\n            track = data[prop]\n\n            if isinstance(track, basestring):\n                # Expression\n                continue\n\n            cleanedTrack = [track[0]]\n\n            for i in xrange(1, len(track) - 1):\n\n                keyframe = track[i]\n                value = keyframe[1]\n                prevValue = track[i-1][1]\n                nextValue = track[i+1][1]\n                \n                if prevValue != value or nextValue != value:\n                    cleanedTrack.append(keyframe)\n            \n            cleanedTrack.append(track[len(track) - 1])\n\n            data[prop] = cleanedTrack\n\n    # Generate Keyframe text\n    txt = (\"Adobe After Effects 8.0 Keyframe Data\\n\" + \n        (\"\\tUnits Per Second\\t%d\\n\" % fps) +\n        (\"\\tSource Width\\t%d\\n\" % width) +\n        (\"\\tSource Height\\t%d\\n\" % height) +\n        \"\\tSource Pixel Aspect Ratio\\t1\\n\" +\n        \"\\tComp Pixel Aspect Ratio\\t1\\n\\n\")\n\n    for prop in data.keys():\n        # Add property header\n        column = PROP_INFO[prop]['column']\n        track = data[prop]\n        \n        txt += '\\t'.join(PROP_INFO[prop]['header']) + '\\n'\n\n        if isinstance(track, basestring):\n            # Expression\n            txt += 'Expression Data\\n'\n            txt += track + '\\n'\n            txt += 'End of Expression Data\\n\\n'\n\n        else:\n            # Keyframes\n            isMultiDim = isinstance(column, tuple)\n\n            if isMultiDim:\n                column = '\\t'.join(PROP_INFO[prop]['column'])\n            \n            txt += '\\tFrame\\t%s\\n' % column\n            \n            for (f, value) in track:\n                value = '\\t'.join([str(v) for v in value]) if isMultiDim else str(value)\n                txt += '\\t%d\\t%s\\n' % (f, value)\n            \n            txt += '\\n'\n\n    txt += '\\n\\nEnd of Keyframe Data\\n'\n\n    # Copy to clipboard\n    cb = QApplication.clipboard()    \n    cb.clear(mode=cb.Clipboard)\n    cb.setText(txt, mode=cb.Clipboard)\n\n    hou.ui.displayMessage('Keyframes has copied to the clipboard.', ('OK',))\n\ndef getZoomAtFrame(cam, frame):\n    width = cam.parm('resx').eval()\n    aperture = cam.parm('aperture').evalAtFrame(frame)\n    focal = cam.parm('focal').evalAtFrame(frame)\n    halfFov = math.atan2(aperture / 2, focal)\n    return float(width) / (2.0 * math.tan(halfFov))\n\nPROP_INFO = {\n    'position': {\n        'header': ('Transform', 'Position'),\n        'column': ('X Pixels', 'Y Pixels', 'Z Pixels')\n    },\n    'x_rotation': {\n        'header': ('Transform', 'X Rotation'),\n        'column': 'degrees'\n    },\n    'y_rotation': {\n        'header': ('Transform', 'Y Rotation'),\n        'column': 'degrees'\n    },\n    'z_rotation': {\n        'header': ('Transform', 'Rotation'),\n        'column': 'degrees'\n    },\n    'scale': {\n        'header': ('Transform', 'Scale'),\n        'column': ('X percent', 'Y percent', 'Z percent')\n    },\n    'zoom': {\n        'header': ('Camera Options', 'Zoom'),\n        'column': 'pixels'\n    },\n    'poi': {\n        'header': ('Transform', 'Point of Interest'),\n        'column': ('X Pixels', 'Y Pixels', 'Z Pixels')\n    }\n}\n\nmain()" }
            parmtag { "editor" "1" }
            parmtag { "editorlang" "python" }
            parmtag { "script_callback_language" "python" }
        }
    }

    group {
        name    "stdswitcher4_3"
        label   "Render"

        parm {
            name    "shop_materialpath"
            baseparm
            label   "Material"
            export  none
        }
        parm {
            name    "shop_materialopts"
            baseparm
            label   "Options"
            invisible
            export  none
        }
        parm {
            name    "tdisplay"
            baseparm
            label   "Display"
            joinnext
            export  none
        }
        parm {
            name    "display"
            baseparm
            label   "Display"
            export  none
        }
    }

    group {
        name    "stdswitcher4_4"
        label   "Misc"

        parm {
            name    "use_dcolor"
            baseparm
            label   "Set Wireframe Color"
            export  none
        }
        parm {
            name    "dcolor"
            baseparm
            label   "Wireframe Color"
            export  none
        }
        parm {
            name    "picking"
            baseparm
            label   "Viewport Selecting Enabled"
            export  none
        }
        parm {
            name    "pickscript"
            baseparm
            label   "Select Script"
            export  none
        }
        parm {
            name    "caching"
            baseparm
            label   "Cache Object Transform"
            export  none
        }
        parm {
            name    "vport_shadeopen"
            baseparm
            label   "Shade Open Curves In Viewport"
            export  none
        }
        parm {
            name    "vport_displayassubdiv"
            baseparm
            label   "Display as Subdivision in Viewport"
            invisible
            export  none
        }
        parm {
            name    "vport_onionskin"
            baseparm
            label   "Onion Skinning"
            export  none
        }
        parm {
            name    "renderable"
            baseparm
            label   "Renderable"
            export  none
        }
    }

}
